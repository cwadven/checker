# Generated by Django 4.1.10 on 2024-08-09 13:28
import django.contrib.postgres.indexes
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('member', '0004_membermapsubscription'),
        ('map', '0002_alter_map_options'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Arrow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('simple_word', models.CharField(max_length=256)),
                ('title', models.CharField(max_length=256)),
                ('description', models.TextField()),
                ('is_acquisition_only_show_info', models.BooleanField(default=False)),
                ('total_acquisition_count', models.BigIntegerField(db_index=True, default=0, help_text='총 획득 수')),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('map', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='map.map')),
            ],
            options={
                'verbose_name': 'Arrow',
                'verbose_name_plural': 'Arrow',
            },
        ),
        migrations.CreateModel(
            name='ArrowAcquisitionQuestionMemberResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('response', models.CharField(blank=True, max_length=256, null=True)),
                ('status', models.CharField(choices=[('PENDING', '답변중'), ('CORRECT', '정답'), ('WRONG', '오답')], max_length=20)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Arrow 획득을 위한 조건 중 문제형: 사용자 답지',
                'verbose_name_plural': 'Arrow 획득을 위한 조건 중 문제형: 사용자 답지',
            },
        ),
        migrations.CreateModel(
            name='Node',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('simple_word', models.CharField(max_length=256)),
                ('title', models.CharField(max_length=256)),
                ('description', models.TextField()),
                ('is_acquisition_only_show_info', models.BooleanField(default=False)),
                ('phase', models.CharField(choices=[('START', '시작'), ('END', '종료')], max_length=20, null=True)),
                ('size', models.FloatField(default=1.0)),
                ('total_acquisition_count', models.BigIntegerField(db_index=True, default=0, help_text='총 획득 수')),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('map', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='map.map')),
            ],
            options={
                'verbose_name': 'Node',
                'verbose_name_plural': 'Node',
            },
        ),
        migrations.CreateModel(
            name='NodeAcquisitionRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=256, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('arrows', models.ManyToManyField(blank=True, help_text='노드 획득을 위한 필요한 획득 Arrow', null=True, to='network.arrow')),
                ('node', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='network.node')),
            ],
            options={
                'verbose_name': 'Node 획득을 위한 조건',
                'verbose_name_plural': 'Node 획득을 위한 조건',
            },
        ),
        migrations.CreateModel(
            name='ArrowAcquisitionRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('arrow', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='network.arrow')),
            ],
            options={
                'verbose_name': 'Arrow 획득을 위한 조건',
                'verbose_name_plural': 'Arrow 획득을 위한 조건',
            },
        ),
        migrations.CreateModel(
            name='ArrowAcquisitionQuestionRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('is_auto_mark', models.BooleanField(default=False)),
                ('is_always_correct', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('arrow_acquisition_rule', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='network.arrowacquisitionrule')),
            ],
            options={
                'verbose_name': 'Arrow 획득을 위한 조건 중 문제형: 문제',
                'verbose_name_plural': 'Arrow 획득을 위한 조건 중 문제형: 문제',
            },
        ),
        migrations.CreateModel(
            name='ArrowAcquisitionQuestionMemberResponseReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reply', models.TextField(blank=True, null=True)),
                ('replied_status', models.CharField(choices=[('PENDING', '답변중'), ('CORRECT', '정답'), ('WRONG', '오답')], max_length=20)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('arrow_acquisition_question_member_response', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='network.arrowacquisitionquestionmemberresponse')),
                ('replied_member', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Arrow 획득을 위한 조건 중 문제형: 채점자 답변',
                'verbose_name_plural': 'Arrow 획득을 위한 조건 중 문제형: 채점자 답변',
            },
        ),
        migrations.AddField(
            model_name='arrowacquisitionquestionmemberresponse',
            name='arrow_acquisition_question_rule',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='network.arrowacquisitionquestionrule'),
        ),
        migrations.AddField(
            model_name='arrowacquisitionquestionmemberresponse',
            name='member_map_subscription',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='member.membermapsubscription'),
        ),
        migrations.AddField(
            model_name='arrowacquisitionquestionmemberresponse',
            name='question_member_response_reply',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='network.arrowacquisitionquestionmemberresponsereply'),
        ),
        migrations.CreateModel(
            name='ArrowAcquisitionQuestionAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(blank=True, max_length=256, null=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('arrow_acquisition_question_rule', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='network.arrowacquisitionquestionrule')),
            ],
            options={
                'verbose_name': 'Arrow 획득을 위한 조건 중 문제형: 정답',
                'verbose_name_plural': 'Arrow 획득을 위한 조건 중 문제형: 정답',
            },
        ),
        migrations.AddField(
            model_name='arrow',
            name='source_node',
            field=models.ForeignKey(help_text='출발지 노드', on_delete=django.db.models.deletion.DO_NOTHING, related_name='source_arrows', to='network.node'),
        ),
        migrations.AddField(
            model_name='arrow',
            name='target_node',
            field=models.ForeignKey(help_text='도착지 노드', on_delete=django.db.models.deletion.DO_NOTHING, related_name='target_arrows', to='network.node'),
        ),
        migrations.AddIndex(
            model_name='node',
            index=django.contrib.postgres.indexes.GinIndex(fields=['simple_word'], name='node_simple_word_gin_idx', opclasses=['gin_trgm_ops']),
        ),
        migrations.AddIndex(
            model_name='node',
            index=django.contrib.postgres.indexes.GinIndex(fields=['title'], name='node_title_gin_idx', opclasses=['gin_trgm_ops']),
        ),
    ]
